import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer


buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = uri("https://plugins.gradle.org/m2/") }
        maven { url = uri("https://oss.jfrog.org/artifactory/oss-snapshot-local/") }
        maven {
            name 'Gradle Shadow'
            url 'https://dl.bintray.com/content/johnrengelman/gradle-plugins'
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_plugin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_plugin_version"
        classpath "org.jetbrains.kotlin.kapt:org.jetbrains.kotlin.kapt.gradle.plugin:$kotlin_plugin_version"
        classpath "org.openapitools:openapi-generator-gradle-plugin:$openapi_generator_version"
    }
}

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "org.jetbrains.kotlin.plugin.jpa"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-jpa"
//apply plugin: "org.openapi.generator"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "org.jetbrains.kotlin.plugin.allopen"
apply plugin: "org.jetbrains.kotlin.plugin.noarg"
apply plugin: "org.jetbrains.kotlin.plugin.serialization"
apply plugin: "application"


group "com.emoldino"
version "0.0.1"
mainClassName = "io.ktor.server.jetty.EngineMain"

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url = uri("https://plugins.gradle.org/m2/") }
    maven { url = uri("https://oss.jfrog.org/oss-snapshot-local/") }
    maven { url = uri("https://github.com/ktorio/ktor") }
    maven { url = uri("https://repo.sultanofcardio.com/artifactory/sultanofcardio") }
    maven { url = uri("https://maven.pkg.jetbrains.space/public/p/ktor/eap") }

}

dependencies {
    subprojects.forEach {
        implementation(project(it.path))
    }

    implementation("com.google.devtools.ksp:symbol-processing-api:$ksp_version")
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:$kotlinx_version"
    implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_plugin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.1"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "ch.qos.logback:logback-core:$logback_version"
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    implementation "org.codehaus.janino:janino:$janino_version"
    implementation "org.eclipse.jetty:jetty-http:$jetty_version"
    implementation "org.eclipse.jetty:jetty-io:$jetty_version"
    implementation "org.eclipse.jetty:jetty-util:$jetty_version"
//    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-server-jetty:$ktor_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-network-tls:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    implementation "io.ktor:ktor-auth:$ktor_version"
    implementation "io.ktor:ktor-server-host-common:$ktor_version"
    implementation "io.ktor:ktor-locations:$ktor_version"
    implementation "io.ktor:ktor-metrics:$ktor_version"
//    implementation "io.ktor:ktor-client-core:$ktor_version"
//    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
//    implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
//    implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
    implementation "io.ktor:ktor-webjars:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    implementation "io.ktor:ktor-auth-jwt:$ktor_version"
    implementation "io.ktor:ktor-locations:$ktor_version"
//    implementation "io.swagger:swagger-annotations:$swagger_version"
//    implementation "io.swagger:swagger-core:$swagger_version"
    implementation "org.hibernate:hibernate-core:$hibernate_version"
    implementation "org.hibernate:hibernate-entitymanager:$hibernate_version"
    implementation "org.hibernate:hibernate-validator:$hibernate_validator_version"
    implementation "org.hibernate:hibernate-c3p0:$hibernate_version"
    implementation "javax.validation:validation-api:2.0.1.Final"
    kapt("com.querydsl:querydsl-apt:$querydsl_version:jpa")
    kapt("com.google.dagger:dagger-compiler:$dagger_version")
    implementation("io.jsonwebtoken:jjwt-api:$jjwt_version")
    implementation("io.jsonwebtoken:jjwt-impl:$jjwt_version")
    // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms
    //runtime("org.bouncycastle:bcprov-jdk15on:$bcprov_version")
    implementation("io.jsonwebtoken:jjwt-jackson:$jjwt_version")
    // https://mvnrepository.com/artifact/io.reactivex.rxjava3/rxkotlin
    //runtimeOnly("io.reactivex.rxjava3:rxkotlin:$rxkotlin_version")
    implementation "com.zaxxer:HikariCP:$hikaricp_version"
    implementation "mysql:mysql-connector-java:$mysql_version"
    implementation "com.sksamuel.hoplite:hoplite-core:$hoplite_version"
    implementation "com.sksamuel.hoplite:hoplite-yaml:$hoplite_version"
    implementation "org.apache.kafka:kafka-clients:$kafka_version"
    implementation "io.github.microutils:kotlin-logging:$kotlin_logging_version"
    implementation "javax.persistence:javax.persistence-api:$javax_persistence_version"
    implementation "javax.annotation:javax.annotation-api:$javax_annotation_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$fasterxml_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$fasterxml_version"
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:$fasterxml_version")
    implementation "org.hibernate.ogm:hibernate-ogm-redis:$ogm_redis_version"
    implementation "io.ktor:ktor-websockets:$websocket_version"
    implementation "com.sultanofcardio:mailman:$mail_version"
    implementation "org.mindrot:jbcrypt:$jbcrypt_version"
    implementation "p6spy:p6spy:$p6spy_version"
    implementation "com.google.code.gson:gson:$gson_version"
//    implementation("org.openapitools:openapi-generator:$openapi_generator_version") {
//        exclude group: "org.slf4j", module: "slf4j-simple"
//    }
 //   implementation "org.openapitools:openapi-generator-cli:$openapi_generator_version"

    // QueryDSL
    implementation("com.querydsl:querydsl-core:${querydsl_version}")
    implementation("com.querydsl:querydsl-jpa:${querydsl_version}")
    implementation("com.querydsl:querydsl-apt:${querydsl_version}")

    annotationProcessor("com.querydsl:querydsl-apt:${querydsl_version}")
    annotationProcessor("com.querydsl:querydsl-apt:${querydsl_version}:jpa")
//    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
//    annotationProcessor("jakarta.annotation:jakarta.annotation-api")

    testAnnotationProcessor("com.querydsl:querydsl-apt:${querydsl_version}")
    testAnnotationProcessor("com.querydsl:querydsl-apt:${querydsl_version}:jpa")
//    testAnnotationProcessor("jakarta.persistence:jakarta.persistence-api")
//    testAnnotationProcessor("jakarta.annotation:jakarta.annotation-api")


    // https://github.com/jwtk/jjwt
    implementation("io.jsonwebtoken:jjwt-api:$jjwt_version")
    implementation("io.jsonwebtoken:jjwt-impl:$jjwt_version")
    // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms
    //runtime("org.bouncycastle:bcprov-jdk15on:$bcprov_version")
    implementation("io.jsonwebtoken:jjwt-jackson:$jjwt_version")
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    // https://mvnrepository.com/artifact/org.mortbay.jetty.alpn/alpn-boot
    testImplementation "org.mortbay.jetty.alpn:alpn-boot:8.1.13.v20181017"

}


compileKotlin {
    kotlinOptions.freeCompilerArgs = ['-Xuse-experimental=kotlin.Experimental']
}

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

shadowJar {
    baseName = "serenity-server"
    classifier = null
    version = null
    transform(ServiceFileTransformer) {
        path = "META-INF/services"
        include "org.eclipse.jetty.http.HttpFieldPreEncoder"
    }
}

allOpen {
    annotation "javax.persistence.Entity"
    annotation "javax.persistence.MappedSuperclass"
    annotation "javax.persistence.Embeddable"
}

noArg {
    annotation "javax.persistence.Entity"
    annotation "javax.persistence.MappedSuperclass"
    annotation "javax.persistence.Embeddable"
}

// ref : https://kotlinlang.org/docs/reference/kapt.html

kapt {
    useBuildCache = false
    correctErrorTypes = true
}

task generateJks(type: JavaExec, dependsOn: "classes") {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.emoldino.serenity.common.CertificateGenerator"
}

getTasksByName("run", false).first().dependsOn("generateJks")
